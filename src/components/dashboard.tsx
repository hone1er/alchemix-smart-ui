"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/mA0UUy372x7
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { IBM_Plex_Sans } from 'next/font/google'
import { Roboto } from 'next/font/google'

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

roboto({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { CoinbaseWalletButton } from "./composed/CoinbaseWalletButton";
import {
  useAccount,
  useConnect,
  useConnections,
  useDisconnect,
  useReadContract,
} from "wagmi";
import { coinbaseWallet } from "wagmi/connectors";
import { arbitrum } from "viem/chains";
import Deposit from "./composed/Deposit";
import { ArbitrumUSDCTokenAddress } from "@/constants/Addresses";
import { erc20Abi } from "viem";

export enum CURRENCY {
  USDC = "usdc",
  ETH = "eth",
}
export function Dashboard() {
  const { connect, isSuccess } = useConnect();
  const { address } = useAccount();
  const { disconnect } = useDisconnect();
  const [currency, setCurrency] = useState(CURRENCY.USDC);
  const [balance, setBalance] = useState(0);
  const [loanAmount, setLoanAmount] = useState(0);
  const [loanDue, setLoanDue] = useState(0);

  const { data: walletBalance } = useReadContract({
    address: ArbitrumUSDCTokenAddress,
    abi: erc20Abi,
    functionName: "balanceOf",
    args: [address!],
  });

  const handleWithdraw = (amount: number) => {
    if (balance >= amount) {
      setBalance(balance - amount);
    } else {
      alert("Insufficient balance");
    }
  };
  const handleLoanRequest = (amount: number) => {
    setLoanAmount(amount);
    setLoanDue(amount * 1.2);
  };
  const handleLoanRepayment = (amount: number) => {
    if (amount <= loanDue) {
      setLoanDue(loanDue - amount);
    } else {
      alert("Repayment amount cannot exceed loan due");
    }
  };
  const handleLoanLiquidation = () => {
    setLoanAmount(0);
    setLoanDue(0);
  };
  if (walletBalance) {
    console.log(
      "ðŸš€ ~ Dashboard ~ walletBalance:",
      (parseInt(walletBalance.toString()) / 10e5)?.toString(),
    );
  }
  return (
    <div className="flex min-h-screen min-w-full max-w-full flex-col bg-background">
      <header className="flex h-40 w-full items-center justify-between bg-primary px-2 py-1 sm:h-[120px]">
        <nav className="flex w-full flex-col items-center justify-between gap-8 px-2 sm:flex-row">
          <h1 className="text-xl font-bold text-primary-foreground">
            Alchemix Smart UI
          </h1>
          <div className="flex  items-center gap-4 sm:flex-row sm:p-2">
            <CoinbaseWalletButton />
            {!!address ? (
              <Button
                size={"lg"}
                className="w-160px h-[56px] bg-[#0052FF] text-lg text-white sm:w-[200px]"
                onClick={() => disconnect()}
                variant={"secondary"}
              >
                Disconnect
              </Button>
            ) : (
              <Button
                size={"lg"}
                className="w-160px h-[56px] bg-[#0052FF] text-lg text-white sm:w-[200px]"
                variant={"secondary"}
                onClick={() => {
                  connect({
                    connector: coinbaseWallet({
                      appName: "Alchemix Smart UI",
                      chainId: arbitrum.id,
                      preference: "smartWalletOnly",
                    }),
                  });
                }}
              >
                Connect
              </Button>
            )}
          </div>
        </nav>
      </header>
      <main className="flex-1 px-8 py-4">
        <div className="mb-4 w-full max-w-24 text-black">
          {/* <Select
            value={currency}
            onValueChange={(val) => setCurrency(val as CURRENCY)}
          >
            <SelectTrigger>
              <SelectValue placeholder={currency.toUpperCase()} />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value={CURRENCY.USDC}>USDC</SelectItem>
              <SelectItem value={CURRENCY.ETH}>ETH</SelectItem>
            </SelectContent>
          </Select> */}
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          <div className="md:col-span-2 lg:col-span-3">
            <Card className="bg-primary text-primary-foreground">
              <CardHeader>
                <CardTitle>Dashboard</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Balance</span>
                    <span className="font-bold">
                      {balance} {currency.toUpperCase()}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Loan Amount</span>
                    <span className="font-bold">
                      {loanAmount} {currency.toUpperCase()}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Loan Due</span>
                    <span className="font-bold">
                      {loanDue} {currency.toUpperCase()}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          <Card className="border shadow-md">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Deposit</CardTitle>
              {walletBalance ? (
                <p className="text-muted-foreground">
                  Wallet Balance: ${parseInt(walletBalance.toString()) / 10e5}{" "}
                  {currency.toUpperCase()}
                </p>
              ) : null}
            </CardHeader>
            <CardContent className="flex h-full flex-col">
              <Deposit currency={currency} />
            </CardContent>
          </Card>
          <Card className="border shadow-md">
            <CardHeader>
              <CardTitle>Withdraw</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Input type="number" placeholder="Enter amount" />
                <Button onClick={() => handleWithdraw(100)}>
                  Withdraw 100 {currency.toUpperCase()}
                </Button>
              </div>
            </CardContent>
          </Card>
          <Card className="border shadow-md">
            <CardHeader>
              <CardTitle>Loans</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Input type="number" placeholder="Enter loan amount" />
                <Button onClick={() => handleLoanRequest(1000)}>
                  Request Loan 1000 {currency.toUpperCase()}
                </Button>
                <Input type="number" placeholder="Enter repayment amount" />
                <div className="flex gap-4">
                  <Button onClick={() => handleLoanRepayment(100)}>
                    Repay 100 {currency.toUpperCase()}
                  </Button>
                  <Button onClick={handleLoanLiquidation}>
                    Liquidate Loan
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
